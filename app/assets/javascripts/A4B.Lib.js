// Generated by CoffeeScript 1.11.1
var create, getRandomIntInclusive, trace;

Element.prototype.setAttributes = function(attrs) {
  var attr, val;
  for (attr in attrs) {
    val = attrs[attr];
    this.setAttribute(attr, val);
  }
};

Element.prototype.css = function(attrs, value) {
  var attr, val;
  if (typeof attrs === "object") {
    for (attr in attrs) {
      val = attrs[attr];
      this.style[attr] = val;
    }
  } else if (value) {
    this.style[attrs] = value;
  } else {
    return window.getComputedStyle(this, null)[attrs];
  }
};

Element.prototype.data = function(keys, value) {
  var key, val;
  if (typeof keys === 'object') {
    for (key in keys) {
      val = keys[key];
      this.dataset[key] = val;
    }
  } else if (value) {
    this.dataset[keys] = value;
  } else {
    return this.dataset[keys];
  }
};

Element.prototype.addClass = function(str) {
  this.classList.add(str);
};

Element.prototype.removeClass = function(str) {
  this.classList.remove(str);
};

Element.prototype.hasClass = function(str) {
  this.classList.contains(str);
};

Element.prototype.hide = function() {
  if (this.style.display === 'inline-block') {
    this.dataset.display = 'inline-block';
  } else if (this.style.display === 'inline') {
    this.dataset.display = 'inline';
  }
  this.style.display = 'none';
};

Element.prototype.show = function() {
  if (this.dataset.display) {
    this.style.display = this.dataset.display;
  } else {
    this.style.display = 'block';
  }
};

Element.prototype.toggle = function() {
  if (this.style.display === 'none') {
    this.show();
  } else {
    this.hide();
  }
};

Number.prototype.doubleDigits = function() {
  if (this < 10) {
    return "0" + this;
  } else {
    return "" + this;
  }
};

String.prototype.doubleDigits = function() {
  if (this < 10) {
    return 0 + this;
  } else {
    return this;
  }
};

create = function(tag, attrs) {
  var attr, data, dom, name, val;
  dom = document.createElement(tag);
  if (attrs) {
    switch (typeof attrs) {
      case 'string':
        if (attrs.charAt(0) === '.') {
          dom.setAttribute('class', attrs.slice(1));
        } else {
          dom.setAttribute('id', attrs.slice(1));
        }
        break;
      default:
        for (attr in attrs) {
          val = attrs[attr];
          if (attr === 'data') {
            for (name in val) {
              data = val[name];
              dom.dataset[name] = data;
            }
          } else {
            dom.setAttribute(attr, val);
          }
        }
    }
  }
  return dom;
};

getRandomIntInclusive = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

Array.prototype.min = function() {
  return Math.min.apply(Math, this);
};

Array.prototype.max = function() {
  return Math.max.apply(Math, this);
};

Array.prototype.clone = function() {
  var array;
  return array = this.slice(0);
};

Array.prototype.shuffle = function(self) {
  var duplicate, i, len, mem, result;
  if (self == null) {
    self = false;
  }
  if (self) {
    mem = this;
    len = mem.length;
    while (len) {
      i = Math.floor(Math.random() * len--);
      this.push(mem.splice(i, 1)[0]);
    }
  } else {
    result = [];
    duplicate = this.slice(0);
    len = duplicate.length;
    while (len) {
      i = Math.floor(Math.random() * len--);
      result.push(duplicate.splice(i, 1)[0]);
    }
    return result;
  }
};

trace = function(str) {
  if (is_debug) {
    console.log(str);
  }
};
